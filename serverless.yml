service: acciona-energy-co2

useDotenv: true

plugins:
  - serverless-deployment-bucket
  - serverless-dotenv-plugin
  - serverless-layers

package:
  individually: true
  excludeDevDependencies: true
  patterns:
    - '!**/**'
    - 'dist/**'

custom:
  appEnvironment: ${file(serverless_resources/environment.yml):environment.${self:provider.stage}}
  appConditions: ${file(serverless_resources/environment.yml):conditions}
  appApiKey: ${param:appApiKey, env:APP_API_KEY}
  appJwtKey: ${param:appJwtKey, env:APP_JWT_KEY}
  # AWS VPC
  vpcNetwork: ${self:custom.appEnvironment.vpcNetwork}
  # AWS S3
  s3BucketBackofficeWebappName: ${self:service}.backoffice.webapp.${self:provider.stage}
  s3BucketStorageName: ${self:service}.storage.${self:provider.stage}
  # AWS CLOUDFRONT
  # cloudFrontBackofficeDomainName: backoffice.${self:custom.route53DomainName}
  # AWS DocumentDB
  documentdbClusterName: ${self:service}-documentdb-${self:provider.stage}
  documentdbDatabaseName: co2_${self:provider.stage}
  documentdbMasterUsername: ${param:DocumentdbUsername, env:DB_USERNAME}
  documentdbMasterPassword: ${param:DocumentdbPassword, env:DB_PASSWORD}
  # AWS SSM + SecretsManager
  secretsManagerAppConfiguration: ${self:service}-sm-secret-app-configuration-${self:provider.stage}
  secretsManagerDocumentdbConnection: ${self:service}-sm-secret-documentdb-connection-${self:provider.stage}
  # SECRETS > Resolved
  secretParameterAppConfiguration: ${ssm:/aws/reference/secretsmanager/${self:custom.secretsManagerAppConfiguration}}
  secretParameterDatabaseConnection: ${ssm:/aws/reference/secretsmanager/${self:custom.secretsManagerDocumentdbConnection}}

  deploymentBucket:
    name: ${self:service}-${sls:stage}
    accelerate: true
    blockPublicAccess: true
  
  serverless-layers:
    - core:
      dependenciesPath: package.json
      functions:
        - api

provider:
  name: aws
  timeout: 15
  memorySize: 512
  region: eu-west-1
  runtime: nodejs18.x
  architecture: arm64
  endpointType: REGIONAL
  logRetentionInDays: 14
  deploymentMethod: direct
  stage: ${opt:stage, 'development'}
  profile: ${opt:aws-profile, 'acciona_charger_cli'}
  deploymentBucket:
    name: ${self:service}-serverless-${sls:stage}
  environment:
    AWS_STAGE: ${self:provider.stage}
    AWS_SERVICE: ${self:service}
    APP_API_KEY: ${self:custom.secretParameterAppConfiguration.api_key}
    APP_JWT_KEY: ${self:custom.secretParameterAppConfiguration.jwt_key}
    DB_HOST: !GetAtt DocumentDBCluster.Endpoint
    DB_PORT: !GetAtt DocumentDBCluster.Port
    DB_USERNAME: ${self:custom.secretParameterDatabaseConnection.username}
    DB_PASSWORD: ${self:custom.secretParameterDatabaseConnection.password}
    NO_COLOR: true # Remove log color lines (nestjs)
  iam:
    role:
      statements:
        # S3 Permissions
        - Effect: Allow
          Action:
            - s3:ListBucket
            - s3:GetObject
            - s3:PutObject
            - s3:GetObjectTagging
            - s3:PutObjectTagging
            - s3:DeleteObject
          Resource:
            - arn:aws:s3:::${self:custom.s3BucketStorageName}
            - arn:aws:s3:::${self:custom.s3BucketStorageName}/*
        # EC2 Network > Permissions
        - Effect: Allow
          Action:
            - ec2:CreateNetworkInterface
            - ec2:DeleteNetworkInterface
            - ec2:DescribeNetworkInterfaces
          Resource: '*' # TODO Revision
        # SES Permissions
        - Effect: Allow
          Action:
            - ses:SendEmail
          Resource: '*' # TODO Revision
        # SSM + SM Permissions
        - Effect: Allow
          Action:
            - ssm:GetParameter
            - secretsmanager:GetSecretValue
          Resource: '*' # TODO Revision
  	
  logs:
    restApi: 
      fullExecutionData: true
      format: '{"requestId":"$context.requestId", "ip": "$context.identity.sourceIp", "requestTime":"$context.requestTime"}'
  apiGateway:
    metrics: true

  stackTags:
    _application: ${self:service}
    _environemnt: ${sls:stage}

functions:
  - ${file(serverless_resources/aws_functions.yml):functions}


resources:
  # SSM + SecretsManager
  - ${file(serverless_resources/aws_ssm.yml)}
  # S3 Buckets
  - ${file(serverless_resources/aws_s3.yml)}
  # Cloudfront
  - ${file(serverless_resources/aws_cloudfront.yml)}
  # DocumentDB
  - ${file(serverless_resources/aws_documentdb.yml)}
  # EC2 Instances
  - ${file(serverless_resources/aws_ec2.yml)}